(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{331:function(a,t,s){a.exports=s.p+"assets/img/route-stateless-dispatch.296cdf0f.png"},332:function(a,t,s){a.exports=s.p+"assets/img/route-stateful-forward.8475ce87.png"},353:function(a,t,s){"use strict";s.r(t);var r=s(18),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_2-3-路由设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-路由设计"}},[a._v("#")]),a._v(" 2.3 路由设计")]),a._v(" "),t("h2",{attrs:{id:"_2-3-1-路由注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-路由注册"}},[a._v("#")]),a._v(" 2.3.1 路由注册")]),a._v(" "),t("p",[a._v("在游戏服务器中，路由（route）作为消息（message）的标识，为消息在整个业务系统中的流转提供支撑。在"),t("a",{attrs:{href:"https://github.com/dobyte/due",target:"_blank",rel:"noopener noreferrer"}},[a._v("due"),t("OutboundLink")],1),a._v("框架中，路由处理器会被提前添加到节点服（Node）上，在节点服（Node）启动时随着节点服信息一同被注入到注册中心（registry）中；集群中的其他服务器会通过服务发现（discovery）获取到这一节点服（Node）的相关信息。")]),a._v(" "),t("h2",{attrs:{id:"_2-3-2-路由状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-路由状态"}},[a._v("#")]),a._v(" 2.3.2 路由状态")]),a._v(" "),t("p",[a._v("在"),t("a",{attrs:{href:"https://github.com/dobyte/due",target:"_blank",rel:"noopener noreferrer"}},[a._v("due"),t("OutboundLink")],1),a._v("框架中，路由被设计成了无状态（stateless）和有状态（stateful）两种模式。两种路由模式分别对应着分布式集群中不同的路由分发机制。但无论是哪种路由模式，一个路由号只能对应一种路由模式。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("无状态路由（stateless route）：无状态路由与HTTP路由比较类似。当网关服（Gate）接收到无状态路由消息后会根据一定的"),t("RouterLink",{attrs:{to:"/guide/v2/route.html#route-stateless-dispatch"}},[a._v("分发策略")]),a._v("分发到对应的节点服（Node）进行消息处理。")],1)]),a._v(" "),t("li",[t("p",[a._v("有状态路由（stateful route）：有状态路由主要解决的是游戏业务中的消息定向转发问题。")])])]),a._v(" "),t("h2",{attrs:{id:"_2-3-3-无状态路由分发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-无状态路由分发"}},[a._v("#")]),a._v(" 2.3.3 无状态路由分发")]),a._v(" "),t("p",[t("img",{attrs:{src:s(331),alt:"无状态路由分发"}})]),a._v(" "),t("ul",[t("li",[a._v("随机（random）：默认策略，网关服（Gate）在接收到无状态路由消息后会在已注册该路由号的节点服（Node）中随机选择一个节点服（Node）进行消息转发。")]),a._v(" "),t("li",[a._v("轮询（rr）：网关服（Gate）在接收到无状态路由消息后会在已注册该路由号的节点服（Node）中按照顺序依次转发到对应的节点服（Node）。")]),a._v(" "),t("li",[a._v("加权轮询（wrr）：网关服（Gate）在接收到无状态路由消息后会在已注册该路由号的节点服（Node）中按照节点服（Node）权重高低依次转发到对应的节点服（Node）。")])]),a._v(" "),t("h2",{attrs:{id:"_2-3-4-有状态路由定向转发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-有状态路由定向转发"}},[a._v("#")]),a._v(" 2.3.4 有状态路由定向转发")]),a._v(" "),t("p",[t("img",{attrs:{src:s(332),alt:"有状态路由定向转发"}})]),a._v(" "),t("p",[a._v("要深入理解有状态路由的工作机制，我们需要先理清网关服（Gate）、节点服（Node）、用户（user）、有状态路由（stateful route）四者之间的关系，这里的路由（route）特指有状态路由（stateful route）。")]),a._v(" "),t("ul",[t("li",[a._v("首先，一个节点服（Node）可以注册多个有状态路由（stateful route）处理器；此时，我们可以将这个节点服（Node）上注册的所有路由看作是一个路由组（route group）。")]),a._v(" "),t("li",[a._v("其次，有状态路由（stateful route）是为了将某个用户（user）的消息引导至某一个特定的节点服（Node）上而设计的，那么有状态路由（stateful route）在进行消息转发前用户（user）必需与网关服（Gate）建立绑定关系。")]),a._v(" "),t("li",[a._v("最后，为了让某个用户（user）的有状态路由消息（message）能够被网关服（Gate）转发到特定的节点服（Node）上，我们还需要将用户（user）与节点服（Node）建立绑定关系。")])]),a._v(" "),t("p",[a._v("在理清了这四者之间的关系后，我们就可以更加清晰地了解到有状态路由的工作机制了。")]),a._v(" "),t("h2",{attrs:{id:"_2-3-5-消息流转"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-5-消息流转"}},[a._v("#")]),a._v(" 2.3.5 消息流转")]),a._v(" "),t("p",[a._v("以下用一个简单的流程图来模拟玩家从建立连接到发起登录、再到加入战斗、最后到攻击怪物的整个消息流转过程。")]),a._v(" "),t("div",{staticClass:"language-mermaid line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sequenceDiagram")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("participant")]),a._v(" Client as 客户端（Client）\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("participant")]),a._v(" Gate as 网关集群（Gate）\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("participant")]),a._v(" Node as 节点集群（Node）\n\nClient "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 建立连接\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--\x3e")]),a._v(" Client"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 连接建立成功\nClient "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 发送路由号为N（无状态）的登录消息\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 根据分发策略将路由消息分发到注册了该路由号N的节点服务器上\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 解析登录消息，完成登录逻辑\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 调用BindGate命令，将用户与网关连接进行绑定\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 绑定网关连接成功\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 调用Push命令，将登录成功消息推送到网关\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Client"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 根据Push命令参数找到对应的连接，将登录成功消息下发到客户端\n\nClient "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 发送路由号为M（无状态）的加入游戏消息\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 根据分发策略将路由消息分发到注册了该路由号M的节点服务器上\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 解析加入游戏消息，完成进入游戏逻辑\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 调用BindNode命令，将用户与当前节点进行绑定\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 调用Push命令，将加入游戏成功消息推送到网关\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Client"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 根据Push命令参数找到对应的连接，将加入游戏成功消息下发到客户端\nClient "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 发送路由号为X（有状态）的攻击消息\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 将攻击消息转发到用户绑定好的并且已注册了路由号为X（有状态）的节点上\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Node"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 解析攻击消息，完成攻击逻辑\nNode "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Gate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 调用Push命令，将攻击成功消息推送到网关\nGate "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("->>")]),a._v(" Client"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 根据Push命令参数找到对应的连接，将攻击成功消息下发到客户端\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);